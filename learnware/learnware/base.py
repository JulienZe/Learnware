import os
import numpy as np
from typing import Union, List

from ..specification import Specification, BaseStatSpecification
from ..model import BaseModel
from ..utils import get_module_by_module_path


class Learnware:
    def __init__(self, id: str, model: BaseModel, specification: Specification):
        """_summary_

        Parameters
        ----------
        id : str
            The learnware id that is generated by market, and is unique
        model : BaseModel
            The learnware model for prediction
        specification : Specification
            The specification including the semantic specification and the statistic specification
        """
        self.id = id
        self.model = model
        self.specification = specification

    def __repr__(self) -> str:
        return "{}({}, {}, {})".format(type(self).__name__, self.id, type(self.model).__name__, self.specification)

    def predict(self, X: np.ndarray) -> np.ndarray:
        return self.model.predict(X)

    def get_model(self) -> BaseModel:
        return self.model

    def get_specification(self) -> Specification:
        return self.specification

    def update_stat_spec(self, name, new_stat_spec: BaseStatSpecification):
        self.specification.update_stat_spec(name, new_stat_spec)

    def update(self):
        # Empty Interface.
        raise NotImplementedError("'update' Method is NOT Implemented.")


class BaseReuser:
    def __init__(self, learnware_list: List[Learnware]):
        self.learnware_list = learnware_list

    def predict(self, user_data: np.ndarray) -> np.ndarray:
        """Give the final prediction for user data with reused learnware

        Parameters
        ----------
        user_data : np.ndarray
            User's labeled raw data.

        Returns
        -------
        np.ndarray
            The final prediction for user data with reused learnware
        """
